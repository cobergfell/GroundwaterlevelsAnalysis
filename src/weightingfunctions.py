# -*- coding: utf-8 -*-
"""
Created on Fri Jun 16 22:30:13 2023

@author: christophe
"""

import numpy as np
from abc import ABC, abstractmethod
from collections import OrderedDict
import scipy



    
class WeighingFunctionsParent:

    """
    A parent class for classes that provide instances of weighing functions,
    aimed at weighing different simulation in a superposition of
    simulations where each simulation corresponds to a specific groundwater
    fluctuation regime.
    At the time of writing this doc (6-9-2023), only one weighting function 
    is implemented.
        
    
    ...
    
    Attributes
    ----------
        
    p_dict : python object of data type 'dict'
        The dictionary defining the model parameters and associated 
        specifications such as associated indexes, names, logtransformed or not, 
        variable or fixed etc. See the the parameterslogistic.py module for additional details.
        
    time : numpy array_like
        An arrays of time numbers generated by matplotlib.dates function date2num
        when prepocessing the input time series using the preprocessedseries.py module   
        
    
    Methods
    -------
    
    get_initial_parameters()
        Method that returns the initial parameters
        
    generate_weights()
        Method that returns a time series of weights.       

    
    """        
    def __init__(self, time = None, p_dict = None, suffix = ""):
  
        self.time = time
        self.p_dict = p_dict

    
    def get_initial_parameters(self, suffix = ""):
        """
        Method that returns the initial parameters 
        
        Parameters
        ----------
        
        suffix : string (optional)
            An optional string to disambiguate a parameter name (if necessary) 
            

        Returns
        -------
        parameters: python object of data type 'dict'
            A dictionary of initial parameters definitions        
    
        """ 
    pass


    def generate_weights(self):
        """
        A function that returns a time series of weights.

        Returns
        -------
        weights: numpy array_like
            time series of weights

            
        """
        pass    
    

        
class Sigmoid(WeighingFunctionsParent):
    
    """ 
    A subclass of WeighingFunctionsParent to generate instances of sigmoid weights 
    to simulate for example a change in the groundwater regime due to a change in 
    physical boundary conditions.
    
    Attributes (in complemnt of the attributes of the parent function)
    ----------
    
    regime: string (optional)
        Specify the fluctuation regime, when applicable (default is an empty string)

    
    """
    def __init__(self, time = None, p_dict = None, stress_type = None, 
                 regime = 'regime_1', suffix = ""):
        
        WeighingFunctionsParent.__init__(self,time = time, p_dict = p_dict, suffix = suffix)

        self.stress_type = stress_type
        self.regime = regime
        self.funcname = 'sigmoid'
        
    def get_initial_parameters(self, suffix = ""):
        
        """
        See description of the method in the parent class
        
        """         
        
        if suffix != "":
            suffix = '_' + suffix 

            
        parameters = OrderedDict()
        
        pname = "switchtime" + suffix
        parameters[pname] = {
            "isvariable": True,
            "logtransform": True,
            "pname": pname,
            "minvalue": 0.,
            "maxvalue": 1.,
            "initvalue":0.66, 
            }  
        
        
        pname = "smoothingfactor" + suffix
        parameters[pname] = {
            "isvariable": True,
            "logtransform": True,
            "pname": pname,
            "minvalue": 1.,
            "maxvalue": 500,
            "initvalue": 50, 
            }             
        


        return parameters      

            
    def generate_weights(self): 
        
        """
        See description of the method in the parent class
        
        """         
        
        time = self.time
        p_dict = self.p_dict
        p_indexes = p_dict['p_indexes']
        stress_type = self.stress_type
        regime = self.regime
        indexes = p_indexes[stress_type][regime]['weightingparam']
        weights_list = []
        _p = []
    
        for ind in indexes:
            p = p_dict['p'][ind]
            if p_dict['logtransform'][ind] == True:
                p = np.exp(p)
            _p.append(p)

        switch = _p[0]
        shape_fact = _p[1]
        

        weights1 = np.zeros((len(time),2))
        weights2 = np.zeros((len(time),2))
        weights1[:,0] = time[:]
        weights2[:,0] = time[:]
        
        w_begin=0
        w_end=1        

        i0 = int(switch*len(time))
            
        for i in range(0,len(time)):
            # time_relative=(time[i]-time[0])/(time[-1]-time[0])
            # switch_relative=(switch-time[0])/(time[-1]-time[0])
            #w=w_begin+decay_term*(w_end-w_begin)/(1+exp(-shape_fact*(float(i)/len(time)-switch)))
            time_relative = float(i)/len(time)
            
            w = w_begin+(w_end-w_begin)/(1+np.exp(shape_fact*(time_relative-switch)))
            w1 = w
            w2 = 1.0-w
            # w1=1.0-w
            # w2=w                
            
            weights1[i,1] = w1
            weights2[i,1] = w2  
                
        return weights1,weights2
    

                                  
if __name__ == "__main__":
    #curdir=os.getcwd()
    sigmoid = Sigmoid()

    print('213 sigmoid', sigmoid)
    